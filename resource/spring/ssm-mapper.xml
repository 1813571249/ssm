<?xml version="1.0" encoding="UTF-8"?>
<!-- 较全的spring的约束，包含了大部分操作 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- dbpc数据源：因为和spring和mybatis整合以后，mybatis配置文件中的数据源会被废除，所以需要在spring配置文件配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <!-- 注入属性 -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/user?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8"></property>
        <property name="username" value="root"></property>
        <property name="password" value=""></property>
        <property name="maxActive" value="10"></property>
        <property name="maxIdle" value="5"></property>

    </bean>


    <!-- 配置sqlSessionFactory:因为mybatis执行数据库的增删改查是由sqlSession来完成，
    sqlSession是由sqlSessionFactory来创建的 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 利用configLocation加载mybatis的配置文件 -->
        <property name="configLocation" value="classpath:mybatis/mybatis.xml"></property>

        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>


    <!-- mapper批量扫描，从mapper包中扫描出所有的mapper接口，自动创建代理对象并且在spring容器中注册，扫描出来的mapper的bean的id为类名（首字母小写） -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定扫描的包名：如果扫描多个包，每个包之间用半角逗号分隔 -->
        <property name="basePackage" value="mapper"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    <!-- 如果sqlSessionTemplateBeanName这个位置选择sqlSessionFactory，数据源的注入就会后执行sqlSessionFactory
    就创建不出来 -->


</beans>